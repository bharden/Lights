{"remainingRequest":"/Users/benharden/HS/budget/front-end/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/benharden/HS/budget/front-end/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/benharden/HS/budget/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/benharden/HS/budget/front-end/src/views/Buckets.vue?vue&type=template&id=c0158402&scoped=true&","dependencies":[{"path":"/Users/benharden/HS/budget/front-end/src/views/Buckets.vue","mtime":1607036571718},{"path":"/Users/benharden/HS/budget/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/benharden/HS/budget/front-end/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/benharden/HS/budget/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/benharden/HS/budget/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
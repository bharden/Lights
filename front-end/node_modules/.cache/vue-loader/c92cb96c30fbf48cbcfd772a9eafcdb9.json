{"remainingRequest":"/Users/benharden/HS/budget/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/benharden/HS/budget/front-end/src/views/Buckets.vue?vue&type=style&index=0&id=c0158402&scoped=true&lang=css&","dependencies":[{"path":"/Users/benharden/HS/budget/front-end/src/views/Buckets.vue","mtime":1607036571718},{"path":"/Users/benharden/HS/budget/front-end/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/benharden/HS/budget/front-end/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/benharden/HS/budget/front-end/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/benharden/HS/budget/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/benharden/HS/budget/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmxlZnRvdmVycyB7CiAgdGV4dC1hbGlnbjogY2VudGVyOwp9Ci5iaW5jb21lIHsKICBmb250LXdlaWdodDogYm9sZDsKfQouYnNwZW50IHsKICBjb2xvcjogI0JCOUYwNjsKfQouYmJ1Y2tldGVkIHsKICBjb2xvcjogIzVBQUE5NTsKfQouYmV4dHJhIHsKICBjb2xvcjogIzA4N0Y4QzsKfQojcGx1cyB7CiAgZmxvYXQ6IHJpZ2h0OwogIG1hcmdpbjogMTBweDsKfQojbWludXMgewogIGZsb2F0OiBsZWZ0OwogIG1hcmdpbjogMTBweDsKfQoucGx1c01pbnVzOmFmdGVyIHsKICBjb250ZW50OiAiIjsKICBkaXNwbGF5OiB0YWJsZTsKICBjbGVhcjogYm90aDsKfQouZ3JpZC1jb250YWluZXIgewogIGRpc3BsYXk6IGdyaWQ7CiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIGF1dG8gYXV0bzsKICBncmlkLXJvdy1nYXA6IDQwcHg7CiAgZ3JpZC1jb2x1bW4tZ2FwOiA0MHB4OwogIHBhZGRpbmc6IDEwcHg7CiAgbWFyZ2luOiA1JTsKICBtYXJnaW4tdG9wOiAwcHg7CiAgdGV4dC1hbGlnbjogY2VudGVyOwp9Ci5idWNrZXRzIHsKICBkaXNwbGF5OiBibG9jazsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjOUVCODhFOwogIGJvcmRlci1yYWRpdXM6IDE1cHg7Cn0KI2J1Y2tldEJ1dHRvbnMxIHsKICBmb250LXNpemU6IDEwcHg7CiAgcGFkZGluZzogNXB4OwogIG1hcmdpbi1ib3R0b206IDE2cHg7CiAgZmxvYXQ6IHJpZ2h0OwogIG1hcmdpbi1yaWdodDogMTBweDsKfQojYnVja2V0QnV0dG9uczIgewogIGZvbnQtc2l6ZTogMTBweDsKICBwYWRkaW5nOiA1cHg7CiAgbWFyZ2luLWJvdHRvbTogMTZweDsKICBmbG9hdDogbGVmdDsKICBtYXJnaW4tbGVmdDogMTBweDsKfQovKiBhZGRCdWNrZXRzICovCi5hZGRCdWNrZXQtbWFzayB7CiAgcG9zaXRpb246IGZpeGVkOwogIHotaW5kZXg6IDk5OTg7CiAgdG9wOiAwOwogIGxlZnQ6IDA7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiAxMDAlOwogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgLjUpOwogIGRpc3BsYXk6IHRhYmxlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgLjNzIGVhc2U7Cn0KLmFkZEJ1Y2tldC13cmFwcGVyIHsKICBkaXNwbGF5OiB0YWJsZS1jZWxsOwogIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7Cn0KLmFkZEJ1Y2tldC1jb250YWluZXIgewogIHdpZHRoOiA1MCU7CiAgbWFyZ2luOiAwcHggYXV0bzsKICBwYWRkaW5nOiAxMHB4IDIwcHg7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKICBib3JkZXItcmFkaXVzOiA1cHg7CiAgYm94LXNoYWRvdzogMCAycHggOHB4IHJnYmEoMCwgMCwgMCwgLjMzKTsKICB0cmFuc2l0aW9uOiBhbGwgLjNzIGVhc2U7CiAgZm9udC1mYW1pbHk6IEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7CiAgdGV4dC1hbGlnbjogY2VudGVyOwp9Ci8qCiAgKiBUaGUgZm9sbG93aW5nIHN0eWxlcyBhcmUgYXV0by1hcHBsaWVkIHRvIGVsZW1lbnRzIHdpdGgKICAqIHRyYW5zaXRpb249ImFkZEJ1Y2tldCIgd2hlbiB0aGVpciB2aXNpYmlsaXR5IGlzIHRvZ2dsZWQKICAqIGJ5IFZ1ZS5qcy4KICAqCiAgKiBZb3UgY2FuIGVhc2lseSBwbGF5IHdpdGggdGhlIGFkZEJ1Y2tldCB0cmFuc2l0aW9uIGJ5IGVkaXRpbmcKICAqIHRoZXNlIHN0eWxlcy4KICAqLwouYWRkQnVja2V0LWVudGVyIHsKICBvcGFjaXR5OiAwOwp9Ci5hZGRCdWNrZXQtbGVhdmUtYWN0aXZlIHsKICBvcGFjaXR5OiAwOwp9Ci5hZGRCdWNrZXQtZW50ZXIgLmFkZEJ1Y2tldC1jb250YWluZXIsCi5hZGRCdWNrZXQtbGVhdmUtYWN0aXZlIC5hZGRCdWNrZXQtY29udGFpbmVyIHsKICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMS4xKTsKICB0cmFuc2Zvcm06IHNjYWxlKDEuMSk7Cn0KLmFkZEJ1Y2tldC1jb250YWluZXIgaDEgewogIG1hcmdpbi10b3A6IDA7Cn0KI2V4aXQtYnV0dG9uIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgbGVmdDogNTAlOwogIHRvcDogLTVweDsKICBwYWRkaW5nOiAycHggNXB4Owp9CiNlZGl0QnVja2V0QnV0dG9uIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgcmlnaHQ6IDQxJTsKICBtYXJnaW4tdG9wOiAzJTsKICBmb250LXNpemU6IDEycHg7CiAgcGFkZGluZzogN3B4Owp9Ci5idWNrZXRJbmZvIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgdG9wOiAtMTAlOwp9Cg=="},{"version":3,"sources":["Buckets.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Buckets.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"bucket\">\n    <div class=\"leftovers\">\n      <h1>{{this.$root.$data.user.fname}}'s Buckets</h1>\n      <p class=\"bincome\">Income: ${{this.income}}</p>\n      <p class=\"bspent\">{{this.$root.$data.user.fname}}'s Total Spent this Month {{this.spent}}</p>\n      <p class=\"bbucketed\">{{this.$root.$data.user.fname}}'s Total amount put in Buckets {{this.bucketed}} (this is reset when you reload)</p>\n      <p class=\"bextra\">{{this.$root.$data.user.fname}}'s Extra {{this.leftover}}</p>\n    </div>\n\n    <div class=\"plusMinus\">\n      <button class=\"buttons\" id=\"plus\" @click=\"showAddBucketPop()\">Add Bucket</button>\n      <button class=\"buttons\" id=\"minus\" @click=\"showDeleteBucketPop()\">Delete Bucket</button>\n    </div>\n\n    <transition v-if=\"showAddBucketBool\" name=\"addBucket\">\n      <div class=\"addBucket-mask\">\n        <div class=\"addBucket-wrapper\">\n          <div class=\"addBucket-container\">\n            <button id=\"exit-button\" class=\"buttons\" @click=\"showAddBucketPop()\">X</button>\n            <form class=\"pure-form pure-form-aligned\" @submit.prevent=\"addBucket\">\n              <fieldset>\n                <legend>New Bucket</legend>\n                <div class=\"pure-control-group\">\n                  <label for=\"name\">Bucket Name: </label>\n                  <input id=\"name\" v-model=\"bucketName\" placeholder=\"name\">\n                </div>\n                <div class=\"pure-control-group\">\n                  <label for=\"monthly\">Monthly Payment: </label>\n                  <input id=\"monthly\" v-model=\"bucketPayment\" placeholder=\"Monthly Payment Goal\">\n                </div>\n                <div class=\"pure-control-group\">\n                  <label for=\"current\">Current if any: </label>\n                  <input id=\"current\" v-model=\"bucketCurrent\" placeholder=\"Current amount saved if any\">\n                </div>\n                <div class=\"pure-controls\">\n                  <button type=\"submit\" class=\"buttons\">Add Bucket</button>\n                </div>\n              </fieldset>\n            </form>\n          </div>\n        </div>\n      </div>\n    </transition>\n\n    <transition v-if=\"showDeleteBucketBool\" name=\"addBucket\">\n      <div class=\"addBucket-mask\">\n        <div class=\"addBucket-wrapper\">\n          <div class=\"addBucket-container\">\n            <button id=\"exit-button\" class=\"buttons\" @click=\"showDeleteBucketPop()\">X</button>\n            <form class=\"pure-form pure-form-aligned\" @submit.prevent=\"deleteBucket()\">\n              <fieldset>\n                <legend>Delete a Bucket</legend>\n                <label for=\"categorySelector\">Select a Bucket: </label>\n                  <select v-model=\"bucket\" id=\"categorySelector\">\n                    <option disabled value=\"\">Select a Category:</option>\n                    <option v-bind:value=\"bucket\" v-for=\"bucket in buckets\" :key=\"bucket._id\">{{bucket.name}}</option>\n                  </select>\n                <div class=\"pure-controls\">\n                  <button type=\"submit\" class=\"buttons\">Delete</button>\n                </div>\n              </fieldset>\n            </form>\n          </div>\n        </div>\n      </div>\n    </transition>\n\n    <div class=\"grid-container\">\n      <div v-for=\"bucket in buckets\" :key=\"bucket._id\" class=\"buckets\">\n        <button class=\"buttons\" id=\"editBucketButton\" @click=\"showEditBucketPop()\">Edit</button>\n        <h3 class=\"bucketInfo\">{{bucket.name}}</h3>\n        <p class=\"bucketInfo\">Total Saved: {{bucket.current}}</p>\n        <p class=\"bucketInfo\">Monthly Payment: {{bucket.payment}}</p>\n        <button class=\"buttons\" id=\"bucketButtons1\" @click=\"makePayment(bucket)\">Make Monthly Payment</button>\n        <button class=\"buttons\" id=\"bucketButtons2\" @click=\"makePayment(bucket)\">Make Custom payment</button>\n      </div>\n    </div>\n\n    <transition v-if=\"showEditBucketBool\" name=\"addBucket\">\n      <div class=\"addBucket-mask\">\n        <div class=\"addBucket-wrapper\">\n          <div class=\"addBucket-container\">\n            <button id=\"exit-button\" class=\"buttons\" @click=\"showEditBucketPop(bucket)\">X</button>\n            <form class=\"pure-form pure-form-aligned\" @submit.prevent=\"editBucket(bucket)\">\n              <fieldset>\n                <legend>{{this.bucketToBeEditied.name}}</legend>\n                <p>Please enter all the information before saving</p>\n                <div class=\"pure-control-group\">\n                  <label for=\"name\">New Name: </label>\n                  <input id=\"name\" v-model=\"newBucketName\" placeholder=\"name\">\n                </div>\n                <div class=\"pure-control-group\">\n                  <label for=\"monthly\">New Monthly Payment: </label>\n                  <input id=\"monthly\" v-model=\"newBucketPayment\" placeholder=\"Monthly Payment Goal\">\n                </div>\n                <div class=\"pure-control-group\">\n                  <label for=\"current\">Current if any: </label>\n                  <input id=\"current\" v-model=\"newBucketCurrent\" placeholder=\"Current amount saved if any\">\n                </div>\n                <div class=\"pure-controls\">\n                  <button type=\"submit\" class=\"buttons\">Save</button>\n                </div>\n              </fieldset>\n            </form>\n          </div>\n        </div>\n      </div>\n    </transition>\n\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n  export default {\n    name: 'Buckets',\n    data () {\n      return {\n        expenses: [],\n        expense: null,\n        spent: 0,\n        leftover: 0,\n        bucketed: 0,\n        buckets: [],\n        bucket: null,\n        editIncomeBool: false,\n        income: this.$root.$data.user.income,\n        showAddBucketBool: false,\n        bucketName: '',\n        bucketPayment: '',\n        bucketCurrent: '0',\n        newBucketName: '',\n        newBucketPayment: '',\n        newBucketCurrent: '0',\n        showDeleteBucketBool: false,\n        totalSpentOnBuckets: 0,\n        payment: '',\n        showEditBucketBool: false,\n        bucketToBeEditied: null,\n      }\n    },\n    created () {\n      this.getExpenses();\n    },\n    methods: {\n      async getExpenses() {\n        try {\n          let response = await axios.get(\"/api/expense\");\n          this.expenses = response.data;\n          this.getBuckets();\n        } catch (error) {\n          console.log(error);\n        }\n      },\n      getTotals() {\n        this.spent = 0;\n        for(var i = 0; i < this.expenses.length; ++i) {\n          if(this.expenses[i].actual != undefined) {\n            this.spent = parseInt(this.spent) + parseInt(this.expenses[i].actual);\n          }\n        }\n        this.leftover = parseInt(this.$root.$data.user.income) - parseInt(this.spent);\n      },\n      async getBuckets() {\n        try {\n          let response = await axios.get(\"/api/bucket\");\n          this.buckets = response.data;\n          if(this.buckets.length == 0) {\n            this.deleteBucketAsExpense();\n          }\n          this.getTotals();\n        } catch (error) {\n          console.log(error);\n        }\n      },\n      showAddBucketPop() {\n        if(this.showAddBucketBool) {\n          this.showAddBucketBool = false;\n        }\n        else {\n          this.showAddBucketBool = true;\n        }\n      },\n      showDeleteBucketPop() {\n        if(this.showDeleteBucketBool) {\n          this.showDeleteBucketBool = false;\n        }\n        else {\n          this.showDeleteBucketBool = true;\n        }\n      },\n      showEditBucketPop(bucket) {\n        if(this.showEditBucketBool) {\n          this.showEditBucketBool = false;\n          this.bucketToBeEditied = null;\n        }\n        else {\n          this.showEditBucketBool = true;\n          this.bucketToBeEditied = bucket;\n        }\n      },\n      async addBucket() {\n        try {\n          await axios.post(\"/api/bucket\", {\n            name: this.bucketName,\n            current: this.bucketCurrent,\n            payment: this.bucketPayment,\n          });\n          if(this.buckets.length == 0) {\n            this.ceateBucketAsExpense();\n          }\n          this.showAddBucketPop();\n          this.getExpenses();\n        } catch (error) {\n          console.log(error);\n          this.error = error.response.data.message;\n        }\n      },\n      async makePayment(bucket) {\n        try {\n          var currentPass = parseInt(bucket.current) + parseInt(bucket.payment);\n          await axios.put(\"/api/bucket/\" + bucket._id, {\n            current: currentPass,\n          });\n          this.payment = bucket.payment;\n          console.log('payment');\n          console.log(this.payment);\n          this.updateBucketAsExpense();\n        } catch (error) {\n          console.log(error);\n          this.error = error.response.data.message;\n        }\n      },\n      async createBucket() {\n        try {\n          await axios.post(\"/api/expense\", {\n            name: 'Bucket',\n            max: this.expenseMax,\n          });\n          this.showDeleteBucketPop();\n          this.getExpenses();\n        } catch (error) {\n          console.log(error);\n          this.error = error.response.data.message;\n        }\n      },\n      async deleteBucket() {\n        try {\n          await axios.delete(\"/api/bucket/\" + this.bucket._id);\n          this.showDeleteBucketPop();\n          this.getExpenses();\n        } catch (error) {\n          console.log(error);\n          this.error = error.response.data.message;\n        }\n      },\n      async ceateBucketAsExpense() {\n        try {\n          await axios.post(\"/api/expense\", {\n            name: 'My Buckets',\n            max: '0',\n            actual: '0',\n          });\n        } catch (error) {\n          console.log(error);\n          this.error = error.response.data.message;\n        }\n      },\n      async deleteBucketAsExpense() {\n        var bucketExpenseID;\n        for(var i = 0; i < this.expenses.length; ++i) {\n          if(this.expenses[i].name == \"My Buckets\") {\n            bucketExpenseID = this.expenses[i]._id\n          }\n        }\n        try {\n          await axios.delete(\"/api/expense/\" + bucketExpenseID);\n        } catch (error) {\n          console.log(error);\n          this.error = error.response.data.message;\n        }\n      },\n      async updateBucketAsExpense() {\n        this.totalSpentOnBuckets = 0\n        for(var i = 0; i < this.expenses.length; ++i) {\n          if(this.expenses[i].name == \"My Buckets\") {\n            if(this.expenses[i].actual != undefined) {\n              this.totalSpentOnBuckets = parseInt(this.expenses[i].actual) + parseInt(this.payment);\n            }\n            else {\n              this.totalSpentOnBuckets = parseInt(this.payment);\n            }\n          }\n        }\n        this.bucketed = this.totalSpentOnBuckets;\n        try {\n          await axios.put(\"/api/expense\", {\n            name: 'My Buckets',\n            actual: this.totalSpentOnBuckets,\n            max: this.bucketed,\n          });\n          this.getExpenses();\n        } catch (error) {\n          console.log(error);\n          this.error = error.response.data.message;\n        }\n      },\n      async editBucket() {\n        try {\n          await axios.put(\"/api/bucket/\" + this.bucketToBeEditied._id, {\n            current: this.newBucketCurrent,\n            name: this.newBucketName,\n            payment: this.newBucketPayment,\n          });\n          this.showEditBucketPop();\n          this.getExpenses();\n        } catch (error) {\n          console.log(error);\n          this.error = error.response.data.message;\n        }\n      },\n    }\n  }\n</script>\n\n<style scoped>\n.leftovers {\n  text-align: center;\n}\n.bincome {\n  font-weight: bold;\n}\n.bspent {\n  color: #BB9F06;\n}\n.bbucketed {\n  color: #5AAA95;\n}\n.bextra {\n  color: #087F8C;\n}\n#plus {\n  float: right;\n  margin: 10px;\n}\n#minus {\n  float: left;\n  margin: 10px;\n}\n.plusMinus:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n.grid-container {\n  display: grid;\n  grid-template-columns: auto auto auto;\n  grid-row-gap: 40px;\n  grid-column-gap: 40px;\n  padding: 10px;\n  margin: 5%;\n  margin-top: 0px;\n  text-align: center;\n}\n.buckets {\n  display: block;\n  background-color: #9EB88E;\n  border-radius: 15px;\n}\n#bucketButtons1 {\n  font-size: 10px;\n  padding: 5px;\n  margin-bottom: 16px;\n  float: right;\n  margin-right: 10px;\n}\n#bucketButtons2 {\n  font-size: 10px;\n  padding: 5px;\n  margin-bottom: 16px;\n  float: left;\n  margin-left: 10px;\n}\n/* addBuckets */\n.addBucket-mask {\n  position: fixed;\n  z-index: 9998;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, .5);\n  display: table;\n  transition: opacity .3s ease;\n}\n.addBucket-wrapper {\n  display: table-cell;\n  vertical-align: middle;\n}\n.addBucket-container {\n  width: 50%;\n  margin: 0px auto;\n  padding: 10px 20px;\n  background-color: #fff;\n  border-radius: 5px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, .33);\n  transition: all .3s ease;\n  font-family: Helvetica, Arial, sans-serif;\n  text-align: center;\n}\n/*\n  * The following styles are auto-applied to elements with\n  * transition=\"addBucket\" when their visibility is toggled\n  * by Vue.js.\n  *\n  * You can easily play with the addBucket transition by editing\n  * these styles.\n  */\n.addBucket-enter {\n  opacity: 0;\n}\n.addBucket-leave-active {\n  opacity: 0;\n}\n.addBucket-enter .addBucket-container,\n.addBucket-leave-active .addBucket-container {\n  -webkit-transform: scale(1.1);\n  transform: scale(1.1);\n}\n.addBucket-container h1 {\n  margin-top: 0;\n}\n#exit-button {\n  position: relative;\n  left: 50%;\n  top: -5px;\n  padding: 2px 5px;\n}\n#editBucketButton {\n  position: relative;\n  right: 41%;\n  margin-top: 3%;\n  font-size: 12px;\n  padding: 7px;\n}\n.bucketInfo {\n  position: relative;\n  top: -10%;\n}\n</style>\n"]}]}